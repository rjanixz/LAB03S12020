/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
package lab03;

import lab03.instr.*;
import lab03.exp.*;

import java.util.ArrayList;
import java.util.List;


public class Gramatica implements GramaticaConstants {

    List<Instruccion> instrucciones = new ArrayList();

/** Fin Lexico */
  final public void start() throws ParseException {
  Instruccion instr;
    label_1:
    while (true) {
      instr = instruccion();
                            instrucciones.add(instr);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case IMPRIMIR:
      case BREAK:
      case CONTINUE:
      case IF:
      case WHILE:
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  final public Instruccion instruccion() throws ParseException {
  Instruccion instr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      instr = definicion();
      break;
    case ID:
      instr = asignacion();
      break;
    case IMPRIMIR:
      instr = imprimir();
      break;
    case BREAK:
      instr = saltar();
      break;
    case CONTINUE:
      instr = continuar();
      break;
    case IF:
      instr = si();
      break;
    case WHILE:
      instr = mientras();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return instr;}
    throw new Error("Missing return statement in function");
  }

  final public Definicion definicion() throws ParseException {
    String id;
    jj_consume_token(VAR);
    jj_consume_token(ID);
                 id = token.image;
    jj_consume_token(PCOMA);
        {if (true) return new Definicion(id);}
    throw new Error("Missing return statement in function");
  }

  final public Asignacion asignacion() throws ParseException {
    String id;
    Expresion exp;
    jj_consume_token(ID);
           id = token.image;
    jj_consume_token(EQ);
    exp = exp();
    jj_consume_token(PCOMA);
        {if (true) return new Asignacion(id, exp);}
    throw new Error("Missing return statement in function");
  }

  final public Imprimir imprimir() throws ParseException {
    Expresion exp;
    jj_consume_token(IMPRIMIR);
    jj_consume_token(PARENI);
    exp = exp();
    jj_consume_token(PAREND);
    jj_consume_token(PCOMA);
        {if (true) return new Imprimir(exp);}
    throw new Error("Missing return statement in function");
  }

  final public Break saltar() throws ParseException {
    jj_consume_token(BREAK);
    jj_consume_token(PCOMA);
                      {if (true) return new Break();}
    throw new Error("Missing return statement in function");
  }

  final public Continue continuar() throws ParseException {
    jj_consume_token(CONTINUE);
    jj_consume_token(PCOMA);
                         {if (true) return new Continue();}
    throw new Error("Missing return statement in function");
  }

  final public If si() throws ParseException {
    ExpBoolean expBool;
    Instruccion instr = null;
    List<Instruccion> instruccionesIfTrue = new ArrayList<Instruccion>();
    List<Instruccion> instruccionesIfFalse = new ArrayList<Instruccion>();
    jj_consume_token(IF);
    jj_consume_token(PARENI);
    expBool = expbool();
    jj_consume_token(PAREND);
    jj_consume_token(LLAVEI);
    label_2:
    while (true) {
      instr = instruccion();
                                                                                instruccionesIfTrue.add(instr);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case IMPRIMIR:
      case BREAK:
      case CONTINUE:
      case IF:
      case WHILE:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(LLAVED);
    jj_consume_token(ELSE);
    jj_consume_token(LLAVEI);
    label_3:
    while (true) {
      instr = instruccion();
                                            instruccionesIfFalse.add(instr);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case IMPRIMIR:
      case BREAK:
      case CONTINUE:
      case IF:
      case WHILE:
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(LLAVED);
        {if (true) return new If(expBool, instruccionesIfTrue, instruccionesIfFalse);}
    throw new Error("Missing return statement in function");
  }

  final public While mientras() throws ParseException {
    ExpBoolean expBool = null;
    Instruccion instr = null;
    List<Instruccion> instrucciones = new ArrayList<Instruccion>();
    jj_consume_token(WHILE);
    jj_consume_token(PARENI);
    expBool = expbool();
    jj_consume_token(PAREND);
    jj_consume_token(LLAVEI);
    label_4:
    while (true) {
      instr = instruccion();
                                                                                   instrucciones.add(instr);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case IMPRIMIR:
      case BREAK:
      case CONTINUE:
      case IF:
      case WHILE:
      case ID:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(LLAVED);
        {if (true) return new While(expBool, instrucciones);}
    throw new Error("Missing return statement in function");
  }

  final public Expresion exp() throws ParseException {
    Expresion op1;
    Expresion op2;
    Expresion exp = null;
    op1 = factor();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
      case MENOS:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        jj_consume_token(MAS);
        op2 = factor();
                             exp = new ExpBinaria(op1, op2, ExpBinaria.Operador.SUMA);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        op2 = factor();
                               exp = new ExpBinaria(op1, op2, ExpBinaria.Operador.RESTA);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        if (exp == null) {
            {if (true) return op1;}
        } else {
            {if (true) return exp;}
        }
    throw new Error("Missing return statement in function");
  }

  final public Expresion factor() throws ParseException {
    Expresion op1;
    Expresion op2;
    Expresion exp = null;
    op1 = num();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
      case DIV:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
        jj_consume_token(POR);
        op2 = num();
                          exp = new ExpBinaria(op1, op2, ExpBinaria.Operador.POR);
        break;
      case DIV:
        jj_consume_token(DIV);
        op2 = num();
                          exp = new ExpBinaria(op1, op2, ExpBinaria.Operador.DIV);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        if (exp == null) {
            {if (true) return op1;}
        } else {
            {if (true) return exp;}
        }
    throw new Error("Missing return statement in function");
  }

  final public Expresion num() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      jj_consume_token(NUM);
            {if (true) return new ExpNum(Integer.parseInt(token.image));}
      break;
    case ID:
      jj_consume_token(ID);
            {if (true) return new ExpId(token.image);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpBoolean expbool() throws ParseException {
    Expresion op1;
    Expresion op2;
    ExpBoolean.Operador op = null;
    op1 = exp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT:
      jj_consume_token(GT);
      op2 = exp();
                         op = ExpBoolean.Operador.GT;
      break;
    case LT:
      jj_consume_token(LT);
      op2 = exp();
                         op = ExpBoolean.Operador.LT;
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return new ExpBoolean(op1, op2, op);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x37c0,0x37c0,0x37c0,0x37c0,0x37c0,0x180000,0x180000,0x600000,0x600000,0x2020,0x1800000,};
   }

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
